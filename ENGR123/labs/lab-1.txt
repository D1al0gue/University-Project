**Core #1**

public class Abs {
    public static int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}


**Core #2**

public class Max {
    // Should return the largest of either a or b.
    public static int max(int a, int b) {
        return Math.max(a, b);
    }
}


**Completion #1**

public class Point {
    private int x;
    private int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public boolean equals(Object o) {
        if (o instanceof Point) {
            Point c = (Point) o;
            return this.x == c.x && this.y == c.y;
        }
        return false;
    }
}


**Completion #2**

public class Rectangle {
    private int x1;
    private int y1;
    private int x2;
    private int y2;

    public Rectangle(int x1, int y1, int x2, int y2) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    public boolean contains(int x, int y) {
        int minX = Math.min(x1, x2);
        int maxX = Math.max(x1, x2);
        int minY = Math.min(y1, y2);
        int maxY = Math.max(y1, y2);

        return x >= minX && x <= maxX && y >= minY && y <= maxY;
    }
}


Original inOrder: {
    // Construct a rectangle from two arbitrary points
public class Rectangle {
    private int x1;
    private int y1;
    private int x2;
    private int y2;
    
    public Rectangle(int x1, int y1, int x2, int y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
    }
    
    public boolean contains(int x, int y) {
    if(x1 <= x2) {
        if(x1 <= x && x <= x2) {
        if(y1 <= y2) {
            return y1 <= y && y <= y2;
        } else {
            return y2 <= y && y <= y1;
        }
        }
    } else {
        if(x2 <= x && x <= x1) {
        if(y1 <= y2) {
            return y1 <= y && y <= y2;
        } else {
            return y2 <= y && y <= y1;
        }       
        }       
    }
    
    return false;
    }

    public boolean InOrder(int n1, int n2, int n3) {
    if (n2 > n1) {
      if (n3 > n2) {
        return true;
      } else {
        return false;
      }
    } else if (n2 == n1) {
      if (n3 == n1) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }

}

}

**Challenge #5a**

public boolean inOrder5a(int n1, int n2, int n3) {
    return !OutOfOrder(n1, n2, n3);
}


**Challenge #5b**

public boolean inOrder5b(int n1, int n2, int n3) {
    return !(n1 > n2 || n2 > n3);
}


**Challenge #5c**

public boolean InBetween(int m, int p, int q) {
    return InOrder(m, p, q) || InOrder(m, q, p);
}

